# -*- coding: utf-8 -*-
"""Titanic Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VCnqi0TW4YMgsfFefzIwvXVEY-tfSI-v

# Project 2: Logistic Regression on Titanic Dataset
Goal: Predict passenger survival using logistic regression.
"""

pip install pandas seaborn scikit-learn matplotlib

"""Step 2: Load and Explore the Dataset"""

# Import essential libraries
import pandas as pd # Data handling
import seaborn as sns # Built-in Titanic dataset and plots
import matplotlib.pyplot as plt # Plotting
from sklearn.model_selection import train_test_split # Splitting data
from sklearn.linear_model import LogisticRegression # Our model
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load Titanic dataset from seaborn
df = sns.load_dataset('titanic')

# Display the first few rows
print(df.head())

"""Step 3: Preprocess the Data"""

# Drop irrelevant or high-missing columns
df = df.drop(['deck', 'embark_town', 'alive', 'class', 'who', 'adult_male'], axis=1)

# Drop rows with missing values
df = df.dropna()

# Encode categorical variables: sex, embarked
df['sex'] = df['sex'].map({'male': 0, 'female': 1})
df['embarked'] = df['embarked'].map({'S': 0, 'C': 1, 'Q': 2})

# Verify the dataset is clean
print(df.info())

"""Step 4: Define Features and Target

"""

# Choose input features
X = df[['pclass', 'sex', 'age', 'sibsp', 'parch', 'fare', 'embarked']]  # Features

# Define target variable
y = df['survived']  # 1 = survived, 0 = died

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

"""Step 5: Train the Logistic Regression Model"""

# Create the logistic regression model
model = LogisticRegression(max_iter=1000)  # Increased iterations to ensure convergence

# Fit the model
model.fit(X_train, y_train)
# Output the learned coefficients
print("Model Coefficients:", model.coef_)
print("Model Intercept:", model.intercept_)

"""Step 6: Evaluate the Model"""

# Predict on test data
y_pred = model.predict(X_test)

# accuracy score
print("Accuracy:", accuracy_score(y_test, y_pred))

# Classification report
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Confusion matrix visualization
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()